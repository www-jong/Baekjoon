'''
1=(1)             1
2=(1)*2           2
3=(1)*3           3
4=(2)             1
5=(2)+(1)         2
6=(2)+(1)*2       3
7=(2)+(1)*3       4
8=(2)*2           2
9=(3)             1
10=(3)+(1)        2
11=(3)+(1)*2      3
12=(2)*3          3
13=(3)+(2)        2
14=(3)+(2)+(1)    3
15=(3)+(2)+(1)*2  4
16=(4)            1
17=(4)+(1)        2
18=(3)*2          2
19=()
100000**(1/2)=316.227

새로운 제곱수가 등장할때, dp는 1로 초기화됨(dp[4],dp[9],dp[16]..)
이때는 dp[i]=min(dp[i-1]+1,dp[x]), x**2=i를 이루는 형식임
하지만 dp[13]의 경우, 규칙에 어긋나게 2가 됨
근데, dp[13]은 dp[4]+dp[9]로 이루어 질 수 있음
즉, dp[i]는 두 제곱수dp의 합이 될 수 있음
만약, dp[i]가 3개의 제곱수의합형태(29처럼 4+9+16)이라 하자.
이것은 4+25 즉, 제곱수2개의 합형태가 가능함
다른예시로, 4+16+25인 45를 보면, 36+9로 표현가능함
다른예시로, 65는 4+25+36이며, 49+16으로 표현가능함. 
66은 49+17로 표현가능한데 이는 dp[17]+1로 표현가능함
--> dp[i]=min(dp[i-j])+1 로 표현가능함
(이때, j는 제곱수이며 i>j)
'''
n=int(input())
dp=[0]*(n+1)
li=[i**2 for i in range(1,317)]
for i in range(1,n+1):
    temp=[]
    for j in li:
        if j>i:
            break
        temp.append(dp[i-j])
    dp[i]=min(temp)+1
print(dp[n])
